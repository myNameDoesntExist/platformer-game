import pygame, typing # type: ignore  # noqa: E401
pygame.init()
lists=typing.TypeVar('lists',list,tuple)
num=typing.TypeVar('num',int,float)

#i srsly dont konow how to code classes
#ow to use git efficiently vro ðŸ¥€ðŸ’”

class Obj:
    def __init__(*args:str,var) -> None:
        '''creates name for obj and puts it in a dictionary
        \nneeds var to know which variable to use'''
        var={_:None for _ in args }
    def rect(initpos,width:num,height:num,color:lists,name:str,var):
        '''uses name (bc its easier to code lmao), it MUST match the name you used when initiating the object
        \nneeds var to know which variable to use'''
        objtype=0 #rect type
        holder=pygame.Rect((width,height),initpos)
        holder.center=initpos
        holderreal=[objtype,color,holder]
        if name:
            if name in var:
                var[name]=holderreal
            else:
                raise AttributeError("nuh uh, did it match yet?")
    def circle(self,center:lists,radius:num,color:lists,name:str,var):
        '''uses name (bc its easier to code lmao), it MUST match the name you used when initiating the object
        \nneeds var to know which variable to use'''
        objtype=1 #circle type
        holder=pygame.draw.circle(scr,color,center,radius).scale_by(self.CIRCLE_BB_SCALE) #real bounding box
        holderreal=[objtype,color,holder,radius]
        if name:
            if name in var:
                var[name]=holderreal
            else:
                raise AttributeError("nuh uh, did it match yet?")
    def draw(self,var):
        '''draws the objects in the dictionary YIPPEE
        \nneeds var to know which variable to use'''
        for i in var:
            if var[i][0]==0: #rect type
                pygame.draw.rect(scr,var[i][1],var[i][2])
                if self.DEBUG_MODE:pygame.draw.rect(scr,[_+self.DIM_LEVEL for _ in var[i][1]],var[i][2]) #add slightly altered obj to show hitbox
            elif var[i][0]==1: #circle type
                pygame.draw.circle(scr,var[i][1],var[i][2].center,var[i][3])
                if self.DEBUG_MODE:pygame.draw.rect(scr,[_+self.DIM_LEVEL for _ in var[i][1]],var[i][2]) #add slightly altered obj to show hitbox
    DEBUG_MODE:bool=False #set to true to see the bounding boxes of the objects
    DIM_LEVEL:int=5 #color dim if debug mode is set to true
    CIRCLE_BB_SCALE:float=0.75 #bounding box scale for circle

class Gravity:
    objects={}
    objecttypes={}
    def __init__(self,gravity:num=9.81)->None:
        '''gravity is acceleration speed added to object every second in pixels. default is 9.81 lmao'''
        self.gravity=gravity
    class Body:
        DYNAMIC:int=1
        STATIC:int=2
        KINETIC:int=3
        def add(self,*args:pygame.Rect,objtype:int=DYNAMIC)->None:
            '''adds gravity to object, accepts dictionaries generated by Obj'''
            #selfects[]=args    ill figure later

scr=pygame.display.set_mode([960, 720])
run=1
test=None
test=Obj('ok',test)
test=Obj.rect([100,100],50,50,[0,0,255],'ok',test)
test=Obj.circle([79,79],25,[255,0,0],)
#cirtest=pygame.draw.circle(scr,[0,0,255],(100,100),25) #does not yield rect as circle
print(test)

while run:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            run=0
    scr.fill([255,255,255])
#    pygame.draw.rect(scr,*test) #lmao
#    pygame.draw.rect(scr,[0,0,255],[100,100,1,1]) #pixel at 100,100
#    pygame.draw.rect(scr,[0,0,200],cirtest) #rect generated by pygame.draw.circle
    test.draw()
    pygame.draw.circle(scr,[0,0,253.4],(100,100),25) #actual cirtest
    pygame.display.flip()